Topics:Arraylist,LinkedList

Arraylist:
An ArrayList is like a resizable array.
It is part of the java.util package and implements the List interface.The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want.

Syntax:
ArrayList<Integer> arr = new ArrayList<>();

Operations:
1.add
2.update
3.delete

Example:
import java.util.ArrrayList;
class Main {
    public static void main(String args[]){
         ArrayList<String> al = new ArrayList<>();
        // 1. Adding elements 
        al.add("Java");
        al.add("Developer");
        System.out.println("Original List : "+al);
      	// Adding Elements at the specific index
        al.add(0, "Hello");
      	System.out.println("After Adding element at index 1 : "+ al);
      	al.remove(1);
      	System.out.println("Element removed from index 0 : "+ al);
        al.set(0, "Welcome");
        System.out.println("List after updation of value : "+al);
}
}

LinkedList:
The LinkedList stores its elements in "containers." The list has a link to the first container and each container has a link to the next container in the list. To add an element to the list, the element is placed into a new container and that container is linked to one of the other containers in the list.
The LinkedList class is a collection which can contain many objects of the same type, just like the ArrayList.
The LinkedList class has the same methods as ArrayList because both follow the List interface. This means you can add, change, remove, or clear elements.

Difference?
Arraylist works efficient for storing and accessing but linkedlist works for manipulating the data.It contains more methods like getFirst(),getLast(),addFirst(),addLast().

Syntax:
LinkedList<String> link=new LinkedList<String>();
                 [or]
var link=new LinkedList<String>();

Operations:
1.add
2.delete
3.update

Example:
import java.util.LinkedList;

public class Main {
  public static void main(String[] args) {
    LinkedList<String> cars = new LinkedList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");
    System.out.println(cars);
  }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Example: (For ArrayList)
import java.util.*;
class Main {
    public static void main(String[] args) {
        ArrayList<String> arr=new ArrayList<>();
        arr.add(0,"Apple");
        arr.add(1,"Mango");
        arr.get(0);
        arr.set(1,"kiwi");
        arr.get(1);
        System.out.println(arr);
        arr.remove(1);
        System.out.println(arr);
        ArrayList<Integer> number=new ArrayList<>();
        number.add(0,1);
        number.add(1,100);
        number.add(2,50);
        number.add(3,14);
        number.add(4,73);
        System.out.println(number);
        Collections.sort(number);
        System.out.println(number);
        Collections.reverse(number);
        System.out.println(number);
        if(arr.contains("Apple")){
             System.out.println("Found Apple");
        }
        ArrayList<String> copy=new ArrayList<>(arr);
        System.out.println(copy);
        for(int s:hash){
        System.out.println(s+" appears "+Collections.frequency(number,s));
        }
    }
}

Output:
[Apple, kiwi]
[Apple]
[1, 100, 50, 1, 73, 50]
[1, 1, 50, 50, 73, 100]
[100, 73, 50, 50, 1, 1]
Found Apple
Copied version:[Apple]
Unique numbers:[1, 50, 100, 73]
1 appears 2
50 appears 2
100 appears 1
73 appears 1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Exmaple:(For LinkedList)

import java.util.*;
class Main {
    public static void main(String[] args) {
        LinkedList<Integer> list=new LinkedList<>();
        list.add(0,18);
        list.add(1,100);
        list.add(2,14);
        list.add(3,10);
        list.add(4,1);
        System.out.println(list);
        list.addFirst(46);
        list.addLast(5);
        System.out.println("Adding first and last:"+list);
        list.removeFirst();
        list.removeLast();
        System.out.println("Removing first and last:"+list);
        LinkedList<Integer> clone = (LinkedList<Integer>)(list);
        System.out.println("Copied version:"+clone);
        int middle=list.size()/2;
        System.out.println("Middle index:" +middle); 
        System.out.println("Middle element:" +list.get(middle));
}
}
Output:
[18, 100, 14, 10, 1]
Adding first and last:[46, 18, 100, 14, 10, 1, 5]
Removing first and last:[18, 100, 14, 10, 1]
Copied version:[18, 100, 14, 10, 1]
Middle index:2
Middle element:14
