Topics:Thread and Multithreading 

What is a thread?
A Java thread is the smallest unit of execution within a program. 
It is a lightweight subprocess that runs independently but shares the same memory space as the process, allowing multiple tasks to execute concurrently.

Life Cycle of Thread
1.New : A new thread is created and not started
2.Runnable: Thread is ready to run and needs to allocate a cpu
3.Running: Threading is executing by using run() method
4.Waiting/Blocked: Threads waiting for  a resource or another thread
5.Terminate: Threads which completed execution

Creation of thread?
1.Using Thread Class
2.Using Runnable interface
-----------------------------------------------------------------------------------------------------------------------------
Example:
1.Thread
import java.io.*;
import java.util.*;

class MyThread extends Thread{
    public void run(){
        
      	String str = "Thread Started Running...";
        System.out.println(str);
    }
}

public class Java{
    
  	public static void main(String args[]){
      	MyThread t1 = new MyThread();
      	t1.start();
    }
}
---------------------------------------------------------------------------------------------------------------------------
2.Runnable
import java.io.*;
import java.util.*;

class MyThread implements Runnable{
    public void run(){
      	String str = "Thread is Running Successfully";
        System.out.println(str);
    }

}

public class JavaT{
    public static void main(String[] args){   
        MyThread g1 = new MyThread();
        Thread t1 = new Thread(g1);
      	t1.start();
    }
}
----------------------------------------------------------------------------------------------------------------------------

Multithreading in Java:
Multithreading in Java is a feature that enables a program to run multiple threads simultaneously, allowing tasks to execute in parallel and utilize the CPU more efficiently.
It can be done either by using Thread class or Runnable interface
Exmaple:
class CookingTask extends Thread {
    private String task;

    CookingTask(String task) {
        this.task = task;
    }

    public void run() {
        System.out.println(task + " is being prepared by " +
            Thread.currentThread().getName());
    }
}

public class Restaurant {
    public static void main(String[] args) {
        Thread t1 = new CookingTask("Pasta");
        Thread t2 = new CookingTask("Salad");
        Thread t3 = new CookingTask("Dessert");
        Thread t4 = new CookingTask("Rice");

        t1.start();
        t2.start();
        t3.start();
        t4.start();
    }
}
