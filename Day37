Topics:Synchronization

What is Synchronization?
In multithreading, synchronization is important to make sure multiple threads safely work on shared resources. Without synchronization, data can become inconsistent or corrupted if multiple threads access and modify shared variables at the same time.
In Java, it is a mechanism that ensures that only one thread can access a resource at any given time.
This process helps prevent issues such as data inconsistency and race conditions when multiple threads interact with shared resources.

Two types:
1.Process Synchronization
2.Thread Synchronization

Example:
.import java.io.*;

class Sender {
    public void send(String msg)
    {
        System.out.println("Sending " + msg);  
        try {
            Thread.sleep(100);
        }
        catch (Exception e) {
            System.out.println("Thread  interrupted.");
        }
        System.out.println(msg + "Sent");     
}
}

class ThreadedSend extends Thread {
    private String msg;
    Sender sender;
    ThreadedSend(String m, Sender obj)
    {
        msg = m;
        sender = obj;
    }

    public void run()
    {
        // Only one thread can send a message at a time.
        synchronized (sender)
        {
            // Synchronizing the send object
            sender.send(msg);
        }
    }
}
class JavaT {
    public static void main(String args[])
    {
        Sender send = new Sender();
        ThreadedSend S1 = new ThreadedSend("Hi ", send);
        ThreadedSend S2 = new ThreadedSend("Bye ", send);
        S1.start();
        S2.start();
        try {
            S1.join();
            S2.join();
        }
        catch (Exception e) {
            System.out.println("Interrupted");
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------
Exmaple :
class Car {
    public int num;
    void increment() {
        for (int i = 0; i < 100; i++) {
            num++;
            System.out.println(Thread.currentThread().getName() + " -> " + num);
            try{
              Thread.sleep(100);
        }
catch(InterruptedException e){
    e.printStackTrace();
}
    }
}
}

public class Threading {
    public static void main(String[] args) throws InterruptedException {
        Car c = new Car();

        Thread t1 = new Thread(() -> c.increment(), "T1");
        Thread t2 = new Thread(() -> c.increment(), "T2");

        t1.start();
        t2.start();

        t1.join();
        t2.join();
        System.out.println("Final num: " + c.num);
    }
}

